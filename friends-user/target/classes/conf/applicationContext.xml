<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:mongo="http://www.springframework.org/schema/data/mongo"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd 
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
    http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
    http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
    http://www.springframework.org/schema/data/mongo http://www.springframework.org/schema/data/mongo/spring-mongo.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
	http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd">
	
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="fileEncoding" value="UTF-8"/>
          <property name="locations">
              <list>
              	<!-- 项目本身的目录 -->
              	<value>classpath:conf/resource/jdbc_dev.properties</value>
              	<value>classpath:conf/resource/mongodb.properties</value>
                <!-- tomcat/bin/conf 中的操作 -->
                <!-- <value>file:${user.dir}/conf/wallet/ucfconfig.properties</value> -->
              </list>
          </property>
	</bean>
	
	<!-- 数据源的定义 -->
	<bean name="sharding_0" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="url" value="${jdbc_url0}" />
		<property name="username" value="${jdbc_username0}" />
		<property name="password" value="${jdbc_password0}" />
		<!-- <property name="driverClassName" value="${jdbc_driver0}" /> -->
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="5" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="200" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="5" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="60000" />
		<property name="validationQuery" value="${validationQuery}" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="testWhileIdle" value="true" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000" />
		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="true" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="1800" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />
		<property name="filters" value="stat" />
	</bean>
	
	<bean name="sharding_1" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="url" value="${jdbc_url1}" />
		<property name="username" value="${jdbc_username1}" />
		<property name="password" value="${jdbc_password1}" />
		<!-- <property name="driverClassName" value="${jdbc_driver1}" /> -->
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="0" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="20" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="0" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="60000" />
		<property name="validationQuery" value="${validationQuery}" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="testWhileIdle" value="true" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000" />
		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="true" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="1800" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />
		<property name="filters" value="stat" />
	</bean>
	
	<!-- redis -->
	<bean id="redisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property   name="maxTotal"  value="${redis.pool.maxtotal}"/>  
        <property   name="maxIdle"    value="${redis.pool.maxidle}"/>  
        <property   name="timeBetweenEvictionRunsMillis"    value="${redis.pool.timebetweenevictionrunsmillis}"/>  
        <property   name="minEvictableIdleTimeMillis"    value="${redis.pool.minevictableidletimemillis}"/>  
        <property   name="testOnBorrow"  value="${redis.pool.testonborrow}"/>
	</bean>
	<!-- 序列生成的redis -->
	<bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="hostName" value="${redis1.hostname}"/>  
        <property name="port" value="${redis1.port}"/>
        <property name="database" value="${redis1.default.db}"/>
        <property name="timeout" value="${redis1.timeout}" />
        <property name="poolConfig"  ref="redisPoolConfig"/> 
	</bean>
	<!-- sharding redis -->
	<bean id="shardedJedisPool" class="redis.clients.jedis.ShardedJedisPool">
		<constructor-arg index="0" ref="redisPoolConfig" />
        <constructor-arg index="1">
            <list>
                <bean class="redis.clients.jedis.JedisShardInfo">
                    <constructor-arg name="host" value="${redis1.hostname}" />
                    <constructor-arg name="name" value="${redis1.name}" />
                    <constructor-arg name="port" value="${redis1.port}" />
                    <constructor-arg name="timeout" value="${redis1.timeout}" />
                    <constructor-arg name="weight" value="${redis1.weight}" />
                </bean>
                <!-- <bean class="redis.clients.jedis.JedisShardInfo">
                    <constructor-arg name="host" value="${redis2.hostname}" />
                    <constructor-arg name="name" value="${redis2.name}" />
                    <constructor-arg name="port" value="${redis2.port}" />
                    <constructor-arg name="timeout" value="${redis2.timeout}" />
                    <constructor-arg name="weight" value="${redis2.weight}" />
                </bean> -->
            </list>
        </constructor-arg>
	</bean>
	
	<mongo:mongo host="${mongo.host}" port="${mongo.port}">
	  <mongo:options
	     connections-per-host="${mongo.connectionsPerHost}"
	     threads-allowed-to-block-for-connection-multiplier="${mongo.threadsAllowedToBlockForConnectionMultiplier}"
	     connect-timeout="${mongo.connectTimeout}"
	     max-wait-time="${mongo.maxWaitTime}"
	     auto-connect-retry="${mongo.autoConnectRetry}"
	     socket-keep-alive="${mongo.socketKeepAlive}"
	     socket-timeout="${mongo.socketTimeout}"
	     slave-ok="${mongo.slaveOk}"
	     write-number="1"
	     write-timeout="0"
	     write-fsync="true"/>
	</mongo:mongo>

	<mongo:db-factory dbname="database" mongo-ref="mongo"/>
	
	<bean id="mongoTemplate" class="org.springframework.data.mongodb.core.MongoTemplate">
	  <constructor-arg name="mongoDbFactory" ref="mongoDbFactory"/>
	</bean>
	<!-- MongoDB GridFS Template 支持，操作mongodb存放的文件 -->
    <mongo:mapping-converter id="converter" db-factory-ref="mongoDbFactory"/>
    <bean id="gridFsTemplate" class="org.springframework.data.mongodb.gridfs.GridFsTemplate">
      <constructor-arg ref="mongoDbFactory"/>
      <constructor-arg ref="converter"/>
    </bean>
	
	<!-- 设置扫描注解bean -->
	<context:component-scan base-package="com.wsx.friends.user">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Service" />
	</context:component-scan>
	
	<context:component-scan base-package="com.wsx.friends.core.redis" />
	
	<import resource="classpath*:/conf/dubbo-provider.xml"></import>
	
	<!-- <import resource="classpath*:/resource/conf/dubbo-consumer.xml"></import> -->
	
</beans>